import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import pandas as pd
import plotly.express as px
import datetime

# charger les données depuis le CSV créé par le script Bash
def load_data():
    try:
        # Le CSV doit contenir deux colonnes sans header : timestamp, price
        df = pd.read_csv("btc_prices.csv", header=None, names=["timestamp", "price"])
        # Convertir la colonne timestamp en datetime
        df["timestamp"] = pd.to_datetime(df["timestamp"], format="%Y-%m-%d %H:%M:%S")
        # Convertir la colonne price en numérique
        df["price"] = pd.to_numeric(df["price"], errors="coerce")
        return df
    except Exception as e:
        print("Erreur lors du chargement du CSV :", e)
        return pd.DataFrame(columns=["timestamp", "price"])

# pour calculer le rapport quotidien à partir des données
def compute_daily_report(df):
    if df.empty:
        return None
    # Extraire la date (sans l'heure)
    df["date"] = df["timestamp"].dt.date
  
    daily = df.groupby("date").agg(
        open_price=("price", "first"),
        close_price=("price", "last"),
        high_price=("price", "max"),
        low_price=("price", "min")
    ).reset_index()
    # volatilité 
    daily["volatility"] = daily["high_price"] - daily["low_price"]
    # Calculer l'évolution en pourcentage : (close - open) / open * 100
    daily["evolution_percent"] = ((daily["close_price"] - daily["open_price"]) / daily["open_price"]) * 100
    # On retourne le rapport du jour le plus récent
    most_recent_date = daily["date"].max()
    report = daily[daily["date"] == most_recent_date]
    return report


app = dash.Dash(__name__)
app.title = "Dashboard - Prix du Bitcoin"

app.layout = html.Div([
    html.H1("Dashboard - Prix du Bitcoin"),
 
    html.Div(id="latest-price", style={"fontSize": "24px", "margin": "10px"}),
  
    dcc.Graph(id="time-series-graph"),
    html.H2("Rapport quotidien"),
    
    html.Div(id="daily-report", style={"fontSize": "18px", "margin": "10px"}),
    # Intervalle pour mettre à jour le dashboard toutes les 5 minutes (300000 ms)
    dcc.Interval(
        id="interval-component",
        interval=5*60*1000,  # 5 minutes en millisecondes
        n_intervals=0
    )
])

# Callback pour actualiser le dashboard à chaque intervalle
@app.callback(
    [Output("latest-price", "children"),
     Output("time-series-graph", "figure"),
     Output("daily-report", "children")],
    [Input("interval-component", "n_intervals")]
)
def update_dashboard(n):
    df = load_data()
    if df.empty:
        return "Aucune donnée disponible", {}, "Aucun rapport quotidien disponible"
    
    # Récupérer la dernière mesure
    latest_row = df.iloc[-1]
    latest_text = f"Dernière mesure ({latest_row['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}) : {latest_row['price']} USD"
    
   
    fig = px.line(df, x="timestamp", y="price", 
                  title="Évolution du prix du Bitcoin",
                  labels={"timestamp": "Temps", "price": "Prix (USD)"})
 
    daily_report_df = compute_daily_report(df)
    if daily_report_df is None or daily_report_df.empty:
        daily_report_content = "Aucun rapport quotidien disponible."
    else:
        row = daily_report_df.iloc[0]
        
        date_str = row["date"].strftime("%Y-%m-%d") if isinstance(row["date"], datetime.date) else str(row["date"])
        daily_report_content = [
            html.P(f"Date: {date_str}"),
            html.P(f"Prix d'ouverture: {row['open_price']} USD"),
            html.P(f"Prix de clôture: {row['close_price']} USD"),
            html.P(f"Prix maximum: {row['high_price']} USD"),
            html.P(f"Prix minimum: {row['low_price']} USD"),
            html.P(f"Volatilité (max - min): {row['volatility']} USD"),
            html.P(f"Évolution: {row['evolution_percent']:.2f}%")
        ]
    
    return latest_text, fig, daily_report_content

if __name__ == '__main__':
    app.run_server(debug=True)
