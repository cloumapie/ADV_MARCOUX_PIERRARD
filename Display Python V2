import dash
from dash import dcc, html, dash_table
from dash.dependencies import Input, Output
import pandas as pd
import plotly.express as px


app = dash.Dash(__name__)
app.title = "ETH Live Dashboard"

# layout pour l'app
app.layout = html.Div([
    html.H1("Dashboard ETH - DonnÃ©es scrappÃ©es"),
    html.Div("Ce dashboard affiche les prix d'Ethereum collectÃ©s automatiquement."),
    html.H3("Analyse journaliÃ¨re d'ETH"),
    html.Div(id='analyse-jour', style={'marginBottom': '30px'}),
    dcc.Graph(id='graphique'),
    dash_table.DataTable(
        id='tableau',
        columns=[{"name": "Date", "id": "Date"}, {"name": "Price", "id": "Price"}],
        page_size=10,
        style_table={'overflowX': 'auto'},
        style_cell={'textAlign': 'left', 'padding': '5px'},
        style_header={'backgroundColor': 'lightgrey', 'fontWeight': 'bold'}
    ),

    # rafraÃ®chir les donnÃ©es toutes les 60 secondes
    dcc.Interval(
        id='interval-update',
        interval=300*1000,  # 60 secondes
        n_intervals=0
    )
])

# callback pour mettre Ã  jour le graphique et la table
@app.callback(
    [Output('graphique', 'figure'),
     Output('tableau', 'data'),
     Output('analyse-jour', 'children')],  # AjoutÃ© ici
    [Input('interval-update', 'n_intervals')]
)
def update_dashboard(n):
    try:
        df = pd.read_csv("eth_prices.csv", header=None, names=["Date", "Price"])
        df["Date"] = pd.to_datetime(df["Date"])
        df["Price"] = pd.to_numeric(df["Price"], errors="coerce")

        df.sort_values("Date", inplace=True)
        df["Daily Change (%)"] = df["Price"].pct_change() * 100

        # Analyse du dernier jour
        dernier_jour = df["Date"].dt.date.iloc[-1]
        df_jour = df[df["Date"].dt.date == dernier_jour]

        variation = df["Daily Change (%)"].iloc[-1]
        moyenne_jour = df_jour["Price"].mean()
        min_jour = df_jour["Price"].min()
        max_jour = df_jour["Price"].max()
        vol_1j = df_jour["Price"].std()
        vol_3j = df["Price"].rolling(window=3).std().iloc[-1]
        analyse_html = html.Div([
            html.P(f"ðŸ“… Date : {dernier_jour}"),
            html.P(f"ðŸ“ˆ Variation journaliÃ¨re : {variation:.2f} %"),
            html.P(f"ðŸ”¼ Prix max du jour : {max_jour:.2f} â‚¬"),
            html.P(f"ðŸ”½ Prix min du jour : {min_jour:.2f} â‚¬"),
            html.P(f"ðŸ“Š Prix moyen du jour : {moyenne_jour:.2f} â‚¬"),
            html.P(f"ðŸ“‰ VolatilitÃ© 1j : {vol_1j:.2f} â‚¬"),
            html.P(f"ðŸ“‰ VolatilitÃ© 3j : {vol_3j:.2f} â‚¬"),
        ])

        fig = px.line(df, x='Date', y='Price', title="Ã‰volution du prix de l'Ethereum")
        return fig, df.to_dict('records'), analyse_html

    except Exception as e:
        print("Erreur de lecture du fichier CSV :", e)
        return {}, [], html.P("Erreur lors du chargement des donnÃ©es.")


if __name__ == '__main__':
    app.run(debug=False, host="0.0.0.0", port=8050)
